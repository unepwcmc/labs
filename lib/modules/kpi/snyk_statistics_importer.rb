# frozen_string_literal: true

module Kpi::SnykStatisticsImporter
  SNYK_CREDENTIALS = {
    'Authorization': "token #{Rails.application.secrets.snyk_token}"
  }.freeze

  SNYK_ENDPOINT = "https://snyk.io/api/v1/org/#{Rails.application.secrets.snyk_org_id}"

  def self.vulnerabilities_per_project
    svg_text = []
    missing_projects = []

    Project.find_each do |project|
      # TODO: - Snyk API access requires plan upgrade
      # project_name = project.github_identifier.split('/').last
      # project_path = "/project/#{project_name}/aggregated-issues"
      # response = HTTParty.post(
      #   SNYK_ENDPOINT + project_path,
      #   headers: SNYK_CREDENTIALS
      # )
      # next if response.response.code == '404'
      # JSON.parse(response.body)

      ## Slow and not very reliable workaround - parsing the badge number generated by Snyk for each project (which is free)
      ## Like with GitHub, only takes into account public repos
      snyk_badge_url = "https://snyk.io/test/github/#{project.github_identifier}/badge.svg"

      svg = nil

      begin
        svg = HTTParty.get(snyk_badge_url)
      rescue Net::ReadTimeout
        Rails.logger.info("Request for #{project.title} timed out")
        next
      end

      if svg.response.code == '404'
        missing_projects << project.id
        next
      end

      Rails.logger.info("Successfully fetched SVG for #{project.title}")

      svg_text << Nokogiri::HTML(svg).text
    end

    Rails.logger.info("#{missing_projects.length} projects were unaccounted for")
    sanitised_array = svg_text.map { |str| str.gsub(' ', '').gsub("\n", '').gsub("vulnerabilities", '') }
    clean_array(sanitised_array)
  end

  def self.clean_array(array)
    number_array = array.map do |str| 
      str.chars.each_slice(str.length / 2).map(&:join).first.to_i
    end

    sort_into_hash(number_array)
  end

  def self.sort_into_hash(number_array)
    no_vulnerabilities_count = 0
    fairly_secure_count = 0
    insecure_count = 0

    number_array.each do |number|
      if number == 0
        no_vulnerabilities_count += 1
      elsif number.positive? && number < 10
        fairly_secure_count += 1
      elsif number > 10
        insecure_count += 1
      end
    end

    {
      no_vulnerabilities: no_vulnerabilities_count,
      fairly_secure: fairly_secure_count,
      insecure: insecure_count
    }
  end
end
